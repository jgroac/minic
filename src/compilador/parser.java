
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 04 04:43:39 PYST 2016
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 04 04:43:39 PYST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\010" +
    "\000\002\005\006\000\002\006\003\000\002\006\002\000" +
    "\002\006\007\000\002\007\005\000\002\007\003\000\002" +
    "\010\004\000\002\011\003\000\002\011\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\013\005" +
    "\000\002\014\004\000\002\014\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\005\000\002\016" +
    "\004\000\002\017\005\000\002\017\003\000\002\020\005" +
    "\000\002\020\005\000\002\020\006\000\002\020\006\000" +
    "\002\021\004\000\002\021\003\000\002\022\005\000\002" +
    "\022\003\000\002\030\005\000\002\030\003\000\002\046" +
    "\005\000\002\046\003\000\002\023\005\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\025\005\000" +
    "\002\025\003\000\002\026\003\000\002\026\003\000\002" +
    "\027\005\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\035\011\000\002\035\007\000\002\036\007" +
    "\000\002\037\005\000\002\037\003\000\002\040\004\000" +
    "\002\040\005\000\002\041\007\000\002\042\007\000\002" +
    "\043\011\000\002\044\007\000\002\045\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\010\005\011\007\010\010\012\001\002\000" +
    "\010\005\011\007\010\010\012\001\002\000\004\002\231" +
    "\001\002\000\004\040\035\001\002\000\010\005\ufffd\007" +
    "\ufffd\010\ufffd\001\002\000\004\046\ufff1\001\002\000\006" +
    "\004\225\046\ufff0\001\002\000\004\046\ufff2\001\002\000" +
    "\004\046\014\001\002\000\004\036\015\001\002\000\010" +
    "\007\022\010\023\037\ufff9\001\002\000\004\046\224\001" +
    "\002\000\004\037\033\001\002\000\006\037\ufffa\043\030" +
    "\001\002\000\006\037\ufff6\043\ufff6\001\002\000\006\011" +
    "\ufff3\046\ufff3\001\002\000\006\004\024\046\ufff4\001\002" +
    "\000\004\004\025\001\002\000\004\036\026\001\002\000" +
    "\004\037\027\001\002\000\004\037\ufff8\001\002\000\006" +
    "\007\022\010\032\001\002\000\006\037\ufff7\043\ufff7\001" +
    "\002\000\006\011\ufff4\046\ufff4\001\002\000\004\040\035" +
    "\001\002\000\010\005\ufffc\007\ufffc\010\ufffc\001\002\000" +
    "\030\006\043\007\022\010\032\011\044\012\061\013\054" +
    "\014\065\015\051\016\040\034\046\046\047\001\002\000" +
    "\006\042\uffe3\043\uffe3\001\002\000\032\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\034\uffec\041\uffec\046\uffec\001\002\000\004\036\220" +
    "\001\002\000\032\006\043\007\022\010\032\011\044\012" +
    "\061\013\054\014\065\015\051\016\040\034\046\041\216" +
    "\046\047\001\002\000\032\006\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\034\uffc1" +
    "\041\uffc1\046\uffc1\001\002\000\016\036\106\042\214\045" +
    "\072\046\103\047\102\050\075\001\002\000\004\046\210" +
    "\001\002\000\032\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\034\uffbf\041\uffbf" +
    "\046\uffbf\001\002\000\004\036\202\001\002\000\006\023" +
    "\142\036\173\001\002\000\032\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\034" +
    "\uffc2\041\uffc2\046\uffc2\001\002\000\004\040\035\001\002" +
    "\000\032\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\034\uffeb\041\uffeb\046\uffeb" +
    "\001\002\000\032\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\034\uffed\041\uffed" +
    "\046\uffed\001\002\000\004\036\161\001\002\000\032\006" +
    "\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe" +
    "\015\uffbe\016\uffbe\034\uffbe\041\uffbe\046\uffbe\001\002\000" +
    "\006\011\044\046\070\001\002\000\032\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\034\uffe9\041\uffe9\046\uffe9\001\002\000\006\042\155" +
    "\043\154\001\002\000\004\036\150\001\002\000\032\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\034\uffea\041\uffea\046\uffea\001\002\000" +
    "\032\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\034\uffe7\041\uffe7\046\uffe7\001" +
    "\002\000\032\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\034\uffe8\041\uffe8\046" +
    "\uffe8\001\002\000\004\036\067\001\002\000\032\006\uffc0" +
    "\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\034\uffc0\041\uffc0\046\uffc0\001\002\000\012" +
    "\007\022\010\032\011\044\046\070\001\002\000\004\023" +
    "\142\001\002\000\016\036\106\042\100\045\072\046\103" +
    "\047\102\050\075\001\002\000\040\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\037\uffcc\042\uffcc\043\uffcc\001" +
    "\002\000\014\036\106\045\072\046\103\047\102\050\075" +
    "\001\002\000\040\017\uffd5\020\uffd5\021\115\022\116\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\037\uffd5\042\uffd5\043\uffd5\001\002\000\040\017" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\037\uffc4\042" +
    "\uffc4\043\uffc4\001\002\000\006\033\122\042\136\001\002" +
    "\000\040\017\uffcb\020\uffcb\021\uffcb\022\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\037\uffcb\042\uffcb\043\uffcb\001\002\000\014\036\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\001\002\000\014\032\124" +
    "\033\uffdb\037\uffdb\042\uffdb\043\uffdb\001\002\000\040\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\037\uffc3\042" +
    "\uffc3\043\uffc3\001\002\000\040\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\037\uffcd\042\uffcd\043\uffcd\001\002" +
    "\000\040\017\uffd1\020\uffd1\021\uffd1\022\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\037\uffd1\042\uffd1\043\uffd1\001\002\000\030\024\133\025" +
    "\131\026\134\027\132\030\130\031\126\032\uffd9\033\uffd9" +
    "\037\uffd9\042\uffd9\043\uffd9\001\002\000\014\036\106\045" +
    "\072\046\103\047\102\050\075\001\002\000\034\017\111" +
    "\020\112\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\037\uffd7\042\uffd7\043\uffd7\001\002" +
    "\000\014\036\106\045\072\046\103\047\102\050\075\001" +
    "\002\000\014\036\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\001\002\000\014\036\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\001\002\000\040\017\uffd6\020\uffd6\021\115\022\116" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\037\uffd6\042\uffd6\043\uffd6\001\002\000\014" +
    "\036\106\045\072\046\103\047\102\050\075\001\002\000" +
    "\014\036\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\001\002" +
    "\000\014\036\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\001" +
    "\002\000\040\017\uffd2\020\uffd2\021\uffd2\022\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\037\uffd2\042\uffd2\043\uffd2\001\002\000\006\033\122" +
    "\037\121\001\002\000\040\017\uffce\020\uffce\021\uffce\022" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\037\uffce\042\uffce\043\uffce\001\002\000" +
    "\014\036\106\045\072\046\103\047\102\050\075\001\002" +
    "\000\014\032\124\033\uffdc\037\uffdc\042\uffdc\043\uffdc\001" +
    "\002\000\014\036\106\045\072\046\103\047\102\050\075" +
    "\001\002\000\030\024\133\025\131\026\134\027\132\030" +
    "\130\031\126\032\uffda\033\uffda\037\uffda\042\uffda\043\uffda" +
    "\001\002\000\014\036\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\001\002\000\014\036\106\045\072\046\103\047\102" +
    "\050\075\001\002\000\014\036\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\001\002\000\014\036\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\001\002\000\014\036\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\001\002\000\014\036\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\001\002\000\014\036\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\001\002\000\034\017\111" +
    "\020\112\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\037\uffd8\042\uffd8\043\uffd8\001\002" +
    "\000\014\036\uffde\045\uffde\046\uffde\047\uffde\050\uffde\001" +
    "\002\000\006\033\122\037\140\001\002\000\004\040\035" +
    "\001\002\000\032\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\034\uffb4\041\uffb4" +
    "\046\uffb4\001\002\000\020\011\044\036\106\044\146\045" +
    "\072\046\144\047\102\050\075\001\002\000\010\033\122" +
    "\042\uffe1\043\uffe1\001\002\000\040\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\142\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\042\uffcd\043\uffcd\001" +
    "\002\000\006\042\uffe2\043\uffe2\001\002\000\004\046\147" +
    "\001\002\000\006\042\uffdf\043\uffdf\001\002\000\014\036" +
    "\106\045\072\046\103\047\102\050\075\001\002\000\010" +
    "\017\111\020\112\037\152\001\002\000\004\042\153\001" +
    "\002\000\032\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\015\uffb6\016\uffb6\034\uffb6\041\uffb6\046" +
    "\uffb6\001\002\000\006\011\044\046\070\001\002\000\044" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\034\uffe5\036\uffe5\041\uffe5\042\uffe5" +
    "\045\uffe5\046\uffe5\047\uffe5\050\uffe5\001\002\000\006\042" +
    "\uffe4\043\uffe4\001\002\000\006\042\160\043\154\001\002" +
    "\000\044\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\034\uffe6\036\uffe6\041\uffe6" +
    "\042\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\001\002\000" +
    "\004\045\162\001\002\000\004\037\163\001\002\000\004" +
    "\042\164\001\002\000\032\006\uffb5\007\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\034\uffb5" +
    "\041\uffb5\046\uffb5\001\002\000\004\016\166\001\002\000" +
    "\004\036\167\001\002\000\014\036\106\045\072\046\103" +
    "\047\102\050\075\001\002\000\006\032\124\037\171\001" +
    "\002\000\004\042\172\001\002\000\032\006\uffb2\007\uffb2" +
    "\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\034\uffb2\041\uffb2\046\uffb2\001\002\000\014\036\106" +
    "\045\072\046\103\047\102\050\075\001\002\000\010\033" +
    "\122\037\uffb9\043\uffb9\001\002\000\006\037\177\043\176" +
    "\001\002\000\014\036\106\045\072\046\103\047\102\050" +
    "\075\001\002\000\004\042\200\001\002\000\032\006\uffbb" +
    "\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\034\uffbb\041\uffbb\046\uffbb\001\002\000\010" +
    "\033\122\037\uffba\043\uffba\001\002\000\014\036\106\045" +
    "\072\046\103\047\102\050\075\001\002\000\006\033\122" +
    "\037\204\001\002\000\004\040\035\001\002\000\034\006" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\016\uffbc\034\uffbc\035\206\041\uffbc\046\uffbc\001" +
    "\002\000\004\040\035\001\002\000\032\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\034\uffbd\041\uffbd\046\uffbd\001\002\000\004\023\211" +
    "\001\002\000\004\046\212\001\002\000\006\042\uffe0\043" +
    "\uffe0\001\002\000\006\033\122\042\215\001\002\000\032" +
    "\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\034\uffb8\041\uffb8\046\uffb8\001\002" +
    "\000\032\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\034\uffb7\041\uffb7\046\uffb7" +
    "\001\002\000\040\002\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\034\uffef\035\uffef\041\uffef\046\uffef\001\002\000\032\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\034\uffee\041\uffee\046\uffee\001\002\000" +
    "\014\036\106\045\072\046\103\047\102\050\075\001\002" +
    "\000\006\032\124\037\222\001\002\000\004\040\035\001" +
    "\002\000\032\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\034\uffb3\041\uffb3\046" +
    "\uffb3\001\002\000\006\037\ufff5\043\ufff5\001\002\000\004" +
    "\036\226\001\002\000\004\037\227\001\002\000\004\040" +
    "\ufffb\001\002\000\004\002\uffff\001\002\000\004\002\000" +
    "\001\002\000\004\040\035\001\002\000\010\005\ufffe\007" +
    "\ufffe\010\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\014\002\004\003\003\004\006\005\005\012" +
    "\012\001\001\000\010\004\232\005\231\012\012\001\001" +
    "\000\002\001\001\000\004\013\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\016\007" +
    "\017\010\020\011\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\030\011" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\033\001\001\000\002\001\001\000\042\011\055\014" +
    "\040\015\052\016\036\017\057\020\035\033\051\034\061" +
    "\035\056\036\063\040\062\041\047\042\041\043\065\044" +
    "\044\045\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\011\055\015\216\016\036\017" +
    "\057\020\035\033\051\034\061\035\056\036\063\040\062" +
    "\041\047\042\041\043\065\044\044\045\054\001\001\000" +
    "\002\001\001\000\020\022\212\023\106\025\073\027\103" +
    "\030\100\032\076\046\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\156\020\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\055\016\070\017\057\020\035\001\001\000\002" +
    "\001\001\000\022\021\072\022\075\023\106\025\073\027" +
    "\103\030\100\032\076\046\104\001\001\000\002\001\001" +
    "\000\020\022\136\023\106\025\073\027\103\030\100\032" +
    "\076\046\104\001\001\000\004\026\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\126\001\001\000\020\022" +
    "\117\023\106\025\073\027\103\030\100\032\076\046\104" +
    "\001\001\000\004\024\107\001\001\000\010\025\112\027" +
    "\103\032\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\113\001\001\000\006\027\116\032\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\023\106\025" +
    "\073\027\103\030\122\032\076\046\104\001\001\000\002" +
    "\001\001\000\014\023\106\025\073\027\103\032\076\046" +
    "\124\001\001\000\004\031\126\001\001\000\002\001\001" +
    "\000\012\023\134\025\073\027\103\032\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\140\001\001" +
    "\000\002\001\001\000\022\020\144\022\142\023\106\025" +
    "\073\027\103\030\100\032\076\046\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\150\025\073\027\103" +
    "\032\076\001\001\000\004\024\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\023\106\025\073\027\103\030\167\032\076\046\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\022\173\023\106\025\073\027\103\030\100" +
    "\032\076\037\174\046\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\022\200\023\106\025\073\027\103" +
    "\030\100\032\076\046\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\022\202\023\106" +
    "\025\073\027\103\030\100\032\076\046\104\001\001\000" +
    "\002\001\001\000\004\013\204\001\001\000\002\001\001" +
    "\000\004\013\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\023\106\025\073\027\103\030\220" +
    "\032\076\046\104\001\001\000\002\001\001\000\004\013" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\233\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/

	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0) 
			parser_obj=new parser(new Scanner(System.in,sf),sf);
		else
			parser_obj=new parser(new Scanner(new java.io.FileInputStream("NombreArchivo.Extension"),sf),sf);

		parser_obj.parse();
		/*
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
		ast.Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Tiny.Generador.setTablaSimbolos(ts);
		Tiny.Generador.generarCodigoObjeto(root);
		*/
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sent_dw ::= DO cuerpo WHILE LPAREN exp_l RPAREN PYC 
            {
              NodoBase RESULT =null;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase el = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
						if(debug) System.out.println("\t Regla 37");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_dw",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sent_while ::= WHILE LPAREN exp_l RPAREN cuerpo 
            {
              NodoBase RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase el = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 36");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_while",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sent_for ::= FOR LPAREN sent_decl sentencia_exp exp RPAREN cuerpo 
            {
              NodoBase RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase sd = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 35");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_for",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sent_gets ::= GETS LPAREN NUM RPAREN PYC 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 34");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_gets",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sent_puts ::= PUTS LPAREN exp_a RPAREN PYC 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						if(debug) System.out.println("\t Regla 33");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_puts",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sent_return ::= RETURN exp PYC 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						if(debug) System.out.println("\t Regla 32b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_return",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sent_return ::= RETURN PYC 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 32");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_return",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sent_args ::= exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 31b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_args",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sent_args ::= sent_args COMA exp 
            {
              NodoBase RESULT =null;
		int sent_argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sent_argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase sent_args = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 31");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_args",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sent_call ::= ID LPAREN sent_args RPAREN PYC 
            {
              NodoBase RESULT =null;
		int sent_argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sent_argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase sent_args = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						if(debug) System.out.println("\t Regla 30");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_call",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sent_if ::= IF LPAREN exp RPAREN cuerpo 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 29b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sent_if ::= IF LPAREN exp RPAREN cuerpo ELSE cuerpo 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cu2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cu2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 29");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sent_iter ::= sent_dw 
            {
              NodoBase RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sd = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 28c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_iter",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sent_iter ::= sent_while 
            {
              NodoBase RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sw = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 28b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_iter",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sent_iter ::= sent_for 
            {
              NodoBase RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 28");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_iter",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sent_io ::= sent_gets 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 27b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_io",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sent_io ::= sent_puts 
            {
              NodoBase RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 27");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_io",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor_bool ::= FALSE 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 26b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_bool",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor_bool ::= TRUE 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 26");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_bool",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relop ::= DIF 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 25f");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relop ::= IGUAL 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 25e");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relop ::= MAYIG 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 25d");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relop ::= MAYOR 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 25c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relop ::= MENOR 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 25b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relop ::= MENIG 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 25");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= factor_bool 
            {
              NodoBase RESULT =null;
		int factor_boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factor_boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase factor_bool = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 24d");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 24c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= ID 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 24b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 24");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // mulop ::= DIV 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 23b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // mulop ::= MULT 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 23");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= factor 
            {
              NodoBase RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 22b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= term mulop factor 
            {
              NodoBase RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase te = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int muright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase mu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 22");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // adop ::= MENOS 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 21b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // adop ::= MAS 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 21");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp_a ::= term 
            {
              NodoBase RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase te = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 20b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_a",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp_a ::= exp_a adop term 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ad = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase te = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 20");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_a",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_exp ::= exp_a 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 19b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_exp ::= simple_exp relop exp_a 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase rl = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ea2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 19");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_l ::= simple_exp 
            {
              NodoBase RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 18b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_l",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp_l ::= exp_l AND simple_exp 
            {
              NodoBase RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase el = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 18");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_l",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp_l 
            {
              NodoBase RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase el = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 17c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp OR exp_l 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase el = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 17b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia_exp ::= PYC 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 16b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia_exp ::= exp PYC 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 16");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // decl ::= ID ASIG AMP ID 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 15c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // decl ::= POINT ID ASIG ID 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 15c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decl ::= ID ASIG exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 15b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // decl ::= ID ASIG decl 
            {
              NodoBase RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase de = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 15");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_decl ::= decl 
            {
              NodoBase RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase de = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 14b");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_decl ::= lista_decl COMA decl 
            {
              NodoBase RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ld = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase de = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 14");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sent_decl ::= lista_decl PYC 
            {
              NodoBase RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ld = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 13b");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sent_decl ::= id_tipo lista_decl PYC 
            {
              NodoBase RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase it = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ld = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 13");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= sent_return 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 12e");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= sent_call 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 12e");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= sent_if 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 12d");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= sent_iter 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 12c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= sent_io 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 12b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= sent_decl 
            {
              NodoBase RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sd = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 12");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_sentencias ::= sentencia 
            {
              NodoBase RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 11b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_sentencias ::= lista_sentencias sentencia 
            {
              NodoBase RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ls = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 11");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= LLI lista_sentencias LLD 
            {
              NodoBase RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ls = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 10");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_f ::= VOID 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 9b");	

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_f",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_f ::= BOOL 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 9a");	

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_f",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_f ::= INT 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 9");	

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_f",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // id_tipo ::= BOOL 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 8b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // id_tipo ::= INT 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 8");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametro ::= id_tipo ID 
            {
              NodoBase RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase it = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 7");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_parametros ::= parametro 
            {
              NodoBase RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase pa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 6b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_parametros ::= lista_parametros COMA parametro 
            {
              NodoBase RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase lp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase pa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 6");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros ::= INT MAIN MAIN LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 5b");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros ::= 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 5");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= lista_parametros 
            {
              NodoBase RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase lp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mainf ::= VOID MAIN LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 4");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainf",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcion ::= tipo_f ID LPAREN parametros RPAREN cuerpo 
            {
              NodoBase RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase tf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 
	  		    		if(debug) System.out.println("\t Regla 3");

			    	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_funciones ::= funcion 
            {
              NodoBase RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 2b");

			    	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_funciones ::= lista_funciones funcion 
            {
              NodoBase RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase lf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 2");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= mainf cuerpo 
            {
              Object RESULT =null;
		int mfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase mf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 1b");

				    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= lista_funciones mainf cuerpo 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase lf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase mf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 1");

			    	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

