
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 04 23:08:52 PYST 2016
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 04 23:08:52 PYST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\010" +
    "\000\002\005\007\000\002\005\007\000\002\006\003\000" +
    "\002\006\002\000\002\007\005\000\002\007\003\000\002" +
    "\010\004\000\002\011\003\000\002\011\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\013\005" +
    "\000\002\014\004\000\002\014\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\005\000\002\016" +
    "\004\000\002\017\005\000\002\017\003\000\002\020\004" +
    "\000\002\020\005\000\002\021\004\000\002\021\004\000" +
    "\002\021\005\000\002\021\002\000\002\022\004\000\002" +
    "\022\003\000\002\023\005\000\002\023\003\000\002\031" +
    "\005\000\002\031\003\000\002\047\005\000\002\047\005" +
    "\000\002\047\005\000\002\047\005\000\002\047\005\000" +
    "\002\047\005\000\002\047\003\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\026\005\000\002\026" +
    "\005\000\002\026\003\000\002\030\005\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\034\003\000\002\034\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\036" +
    "\011\000\002\036\007\000\002\037\007\000\002\040\005" +
    "\000\002\040\003\000\002\041\004\000\002\041\005\000" +
    "\002\042\007\000\002\043\007\000\002\044\011\000\002" +
    "\045\007\000\002\046\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\010\005\011\007\010\010\012\001\002\000" +
    "\010\005\011\007\010\010\012\001\002\000\004\002\233" +
    "\001\002\000\004\002\uffff\001\002\000\010\005\ufffd\007" +
    "\ufffd\010\ufffd\001\002\000\004\046\ufff1\001\002\000\006" +
    "\004\227\046\ufff0\001\002\000\006\004\223\046\ufff2\001" +
    "\002\000\004\046\014\001\002\000\004\036\015\001\002" +
    "\000\010\007\022\010\023\037\ufff8\001\002\000\004\046" +
    "\222\001\002\000\004\037\026\001\002\000\004\037\ufff9" +
    "\001\002\000\006\037\ufff6\043\024\001\002\000\006\011" +
    "\ufff3\046\ufff3\001\002\000\006\011\ufff4\046\ufff4\001\002" +
    "\000\006\007\022\010\023\001\002\000\004\037\ufff7\001" +
    "\002\000\004\040\030\001\002\000\010\005\ufffc\007\ufffc" +
    "\010\ufffc\001\002\000\030\006\037\007\022\010\023\011" +
    "\036\012\054\013\047\014\057\015\044\016\033\034\041" +
    "\046\042\001\002\000\006\042\uffe3\043\uffe3\001\002\000" +
    "\032\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\034\uffec\041\uffec\046\uffec\001" +
    "\002\000\004\036\216\001\002\000\004\041\215\001\002" +
    "\000\032\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\034\uffc2\041\uffc2\046\uffc2" +
    "\001\002\000\004\046\213\001\002\000\016\036\101\042" +
    "\211\045\065\046\075\047\074\050\070\001\002\000\032" +
    "\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\034\uffc0\041\uffc0\046\uffc0\001\002" +
    "\000\004\036\202\001\002\000\012\023\151\036\135\042" +
    "\uffdd\043\uffdd\001\002\000\032\006\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\034" +
    "\uffc3\041\uffc3\046\uffc3\001\002\000\004\040\030\001\002" +
    "\000\032\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\034\uffeb\041\uffeb\046\uffeb" +
    "\001\002\000\032\006\037\007\022\010\023\011\036\012" +
    "\054\013\047\014\057\015\044\016\033\034\041\041\uffed" +
    "\046\042\001\002\000\004\036\167\001\002\000\032\006" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\034\uffbf\041\uffbf\046\uffbf\001\002\000" +
    "\006\011\036\046\063\001\002\000\032\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\034\uffe9\041\uffe9\046\uffe9\001\002\000\006\042\163" +
    "\043\162\001\002\000\004\036\156\001\002\000\032\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\034\uffea\041\uffea\046\uffea\001\002\000" +
    "\032\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\034\uffe7\041\uffe7\046\uffe7\001" +
    "\002\000\004\036\062\001\002\000\032\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\034\uffe8\041\uffe8\046\uffe8\001\002\000\032\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\034\uffc1\041\uffc1\046\uffc1\001\002\000\012" +
    "\007\022\010\023\011\036\046\063\001\002\000\012\023" +
    "\151\037\uffdd\042\uffdd\043\uffdd\001\002\000\016\036\101" +
    "\042\072\045\065\046\075\047\074\050\070\001\002\000" +
    "\040\017\uffc7\020\uffc7\021\uffc7\022\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\037" +
    "\uffc7\042\uffc7\043\uffc7\001\002\000\006\011\036\046\063" +
    "\001\002\000\040\017\uffcd\020\uffcd\021\106\022\107\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\037\uffcd\042\uffcd\043\uffcd\001\002\000\040\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\037\uffc6\042" +
    "\uffc6\043\uffc6\001\002\000\006\033\115\042\144\001\002" +
    "\000\006\011\uffdb\046\uffdb\001\002\000\014\032\117\033" +
    "\uffd9\037\uffd9\042\uffd9\043\uffd9\001\002\000\040\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\037\uffc5\042\uffc5" +
    "\043\uffc5\001\002\000\042\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\036\135\037\uffc8\042\uffc8\043\uffc8\001" +
    "\002\000\040\017\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\037\uffc4\042\uffc4\043\uffc4\001\002\000\040\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\037\uffca\042\uffca" +
    "\043\uffca\001\002\000\030\024\124\025\123\026\126\027" +
    "\125\030\122\031\121\032\uffd7\033\uffd7\037\uffd7\042\uffd7" +
    "\043\uffd7\001\002\000\014\036\101\045\065\046\075\047" +
    "\074\050\070\001\002\000\034\017\103\020\104\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\037\uffd0\042\uffd0\043\uffd0\001\002\000\014\036\101" +
    "\045\065\046\075\047\074\050\070\001\002\000\014\036" +
    "\101\045\065\046\075\047\074\050\070\001\002\000\040" +
    "\017\uffce\020\uffce\021\106\022\107\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\037\uffce" +
    "\042\uffce\043\uffce\001\002\000\014\036\101\045\065\046" +
    "\075\047\074\050\070\001\002\000\014\036\101\045\065" +
    "\046\075\047\074\050\070\001\002\000\040\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\037\uffcb\042\uffcb\043" +
    "\uffcb\001\002\000\040\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\037\uffcc\042\uffcc\043\uffcc\001\002\000\040" +
    "\017\uffcf\020\uffcf\021\106\022\107\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\037\uffcf" +
    "\042\uffcf\043\uffcf\001\002\000\006\033\115\037\114\001" +
    "\002\000\040\017\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\037\uffc9\042\uffc9\043\uffc9\001\002\000\014\036\101" +
    "\045\065\046\075\047\074\050\070\001\002\000\014\032" +
    "\117\033\uffda\037\uffda\042\uffda\043\uffda\001\002\000\014" +
    "\036\101\045\065\046\075\047\074\050\070\001\002\000" +
    "\030\024\124\025\123\026\126\027\125\030\122\031\121" +
    "\032\uffd8\033\uffd8\037\uffd8\042\uffd8\043\uffd8\001\002\000" +
    "\014\036\101\045\065\046\075\047\074\050\070\001\002" +
    "\000\014\036\101\045\065\046\075\047\074\050\070\001" +
    "\002\000\014\036\101\045\065\046\075\047\074\050\070" +
    "\001\002\000\014\036\101\045\065\046\075\047\074\050" +
    "\070\001\002\000\014\036\101\045\065\046\075\047\074" +
    "\050\070\001\002\000\014\036\101\045\065\046\075\047" +
    "\074\050\070\001\002\000\034\017\103\020\104\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\037\uffd4\042\uffd4\043\uffd4\001\002\000\034\017\103" +
    "\020\104\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\037\uffd3\042\uffd3\043\uffd3\001\002" +
    "\000\034\017\103\020\104\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\037\uffd5\042\uffd5" +
    "\043\uffd5\001\002\000\034\017\103\020\104\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\037\uffd6\042\uffd6\043\uffd6\001\002\000\034\017\103\020" +
    "\104\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\037\uffd2\042\uffd2\043\uffd2\001\002\000" +
    "\034\017\103\020\104\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\037\uffd1\042\uffd1\043" +
    "\uffd1\001\002\000\014\036\101\045\065\046\075\047\074" +
    "\050\070\001\002\000\004\037\142\001\002\000\010\033" +
    "\115\037\uffba\043\140\001\002\000\014\036\101\045\065" +
    "\046\075\047\074\050\070\001\002\000\004\037\uffbb\001" +
    "\002\000\004\042\143\001\002\000\070\006\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\037\uffbc\041\uffbc\042\uffbc\043\uffbc\046\uffbc\001\002" +
    "\000\006\011\uffdc\046\uffdc\001\002\000\004\037\146\001" +
    "\002\000\004\040\030\001\002\000\032\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016" +
    "\uffb5\034\uffb5\041\uffb5\046\uffb5\001\002\000\010\037\uffe2" +
    "\042\uffe2\043\uffe2\001\002\000\026\023\151\036\101\037" +
    "\uffdd\042\uffdd\043\uffdd\044\154\045\065\046\075\047\074" +
    "\050\070\001\002\000\012\033\115\037\uffdf\042\uffdf\043" +
    "\uffdf\001\002\000\010\037\uffe0\042\uffe0\043\uffe0\001\002" +
    "\000\004\046\155\001\002\000\010\037\uffde\042\uffde\043" +
    "\uffde\001\002\000\014\036\101\045\065\046\075\047\074" +
    "\050\070\001\002\000\010\017\103\020\104\037\160\001" +
    "\002\000\004\042\161\001\002\000\032\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\034\uffb7\041\uffb7\046\uffb7\001\002\000\006\011\036" +
    "\046\063\001\002\000\044\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\034\uffe5" +
    "\036\uffe5\041\uffe5\042\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\001\002\000\006\042\uffe4\043\uffe4\001\002\000\006" +
    "\042\166\043\162\001\002\000\044\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\034\uffe6\036\uffe6\041\uffe6\042\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\001\002\000\004\046\170\001\002\000\004" +
    "\037\171\001\002\000\004\042\172\001\002\000\032\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\034\uffb6\041\uffb6\046\uffb6\001\002\000" +
    "\004\041\uffee\001\002\000\004\016\175\001\002\000\004" +
    "\036\176\001\002\000\014\036\101\045\065\046\075\047" +
    "\074\050\070\001\002\000\006\032\117\037\200\001\002" +
    "\000\004\042\201\001\002\000\032\006\uffb3\007\uffb3\010" +
    "\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\034\uffb3\041\uffb3\046\uffb3\001\002\000\014\036\101\045" +
    "\065\046\075\047\074\050\070\001\002\000\006\033\115" +
    "\037\204\001\002\000\004\040\030\001\002\000\034\006" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\034\uffbd\035\206\041\uffbd\046\uffbd\001" +
    "\002\000\004\040\030\001\002\000\032\006\uffbe\007\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\034\uffbe\041\uffbe\046\uffbe\001\002\000\006\033\115" +
    "\042\212\001\002\000\032\006\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\034\uffb9" +
    "\041\uffb9\046\uffb9\001\002\000\032\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\034\uffb8\041\uffb8\046\uffb8\001\002\000\012\023\151\037" +
    "\uffdd\042\uffdd\043\uffdd\001\002\000\010\037\uffe1\042\uffe1" +
    "\043\uffe1\001\002\000\040\002\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\034\uffef\035\uffef\041\uffef\046\uffef\001\002\000" +
    "\014\036\101\045\065\046\075\047\074\050\070\001\002" +
    "\000\006\032\117\037\220\001\002\000\004\040\030\001" +
    "\002\000\032\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\034\uffb4\041\uffb4\046" +
    "\uffb4\001\002\000\006\037\ufff5\043\ufff5\001\002\000\004" +
    "\036\224\001\002\000\004\037\225\001\002\000\004\040" +
    "\030\001\002\000\004\002\ufffa\001\002\000\004\036\230" +
    "\001\002\000\004\037\231\001\002\000\004\040\030\001" +
    "\002\000\004\002\ufffb\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\010\005\ufffe\007\ufffe\010" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\014\002\004\003\003\004\006\005\005\012" +
    "\012\001\001\000\010\004\234\005\233\012\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\016\007\017\010" +
    "\020\011\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\024\010\020\011\015\001\001" +
    "\000\002\001\001\000\004\013\026\001\001\000\002\001" +
    "\001\000\042\011\050\014\033\015\045\016\031\017\052" +
    "\020\030\034\044\035\054\036\051\037\057\041\055\042" +
    "\042\043\034\044\060\045\037\046\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\023\207" +
    "\024\101\026\066\030\076\031\072\037\075\047\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\147" +
    "\001\001\000\002\001\001\000\004\013\173\001\001\000" +
    "\002\001\001\000\042\011\050\014\172\015\045\016\031" +
    "\017\052\020\030\034\044\035\054\036\051\037\057\041" +
    "\055\042\042\043\034\044\060\045\037\046\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\164\020" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\050" +
    "\016\063\017\052\020\030\001\001\000\004\021\147\001" +
    "\001\000\022\022\065\023\070\024\101\026\066\030\076" +
    "\031\072\037\075\047\077\001\001\000\002\001\001\000" +
    "\004\020\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\023\112\024\101\026" +
    "\066\030\076\031\072\037\075\047\077\001\001\000\002" +
    "\001\001\000\010\026\111\030\076\037\075\001\001\000" +
    "\010\026\104\030\076\037\075\001\001\000\002\001\001" +
    "\000\006\030\110\037\075\001\001\000\006\030\107\037" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\024" +
    "\101\026\066\030\076\031\115\037\075\047\077\001\001" +
    "\000\002\001\001\000\014\024\101\026\066\030\076\037" +
    "\075\047\117\001\001\000\002\001\001\000\012\024\133" +
    "\026\066\030\076\037\075\001\001\000\012\024\132\026" +
    "\066\030\076\037\075\001\001\000\012\024\131\026\066" +
    "\030\076\037\075\001\001\000\012\024\130\026\066\030" +
    "\076\037\075\001\001\000\012\024\127\026\066\030\076" +
    "\037\075\001\001\000\012\024\126\026\066\030\076\037" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\023\136\024\101\026\066\030\076\031\072" +
    "\037\075\040\135\047\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\023\136\024\101\026\066\030\076" +
    "\031\072\037\075\040\140\047\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\021\152\023\151\024\101" +
    "\026\066\030\076\031\072\037\075\047\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\156\026\066\030\076\037\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\024\101\026\066\030\076\031\176\037\075\047\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\023\202\024\101\026\066\030\076\031\072\037" +
    "\075\047\077\001\001\000\002\001\001\000\004\013\204" +
    "\001\001\000\002\001\001\000\004\013\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\024\101\026\066\030\076\031\216" +
    "\037\075\047\077\001\001\000\002\001\001\000\004\013" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/

	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		/*if (args.length==0) 
			parser_obj=new parser(new Scanner(System.in,sf),sf);
		else*/
		parser_obj=new parser(new Scanner(new java.io.FileInputStream("prueba.mc"),sf),sf);

		parser_obj.parse();
		
		
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
		ast.Util.imprimirAST(root);
		/*TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Tiny.Generador.setTablaSimbolos(ts);
		Tiny.Generador.generarCodigoObjeto(root);
		*/
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sent_dw ::= DO cuerpo WHILE LPAREN exp_l RPAREN PYC 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
						if(debug) System.out.println("\t Regla 38");
						RESULT = new NodoDoWhile(cuerpo, prueba);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_dw",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sent_while ::= WHILE LPAREN exp_l RPAREN cuerpo 
            {
              NodoBase RESULT =null;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 37");
						RESULT = new NodoWhile(prueba, cuerpo);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_while",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sent_for ::= FOR LPAREN sent_decl sentencia_exp decl RPAREN cuerpo 
            {
              NodoBase RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase sd = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase decl = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 36");
						RESULT = new NodoFor(); // TODO COMPLETAR NODO
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_for",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sent_gets ::= GETS LPAREN ID RPAREN PYC 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
						if(debug) System.out.println("\t Regla 35");
						RESULT = new NodoLeer(variable);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_gets",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sent_puts ::= PUTS LPAREN exp_a RPAREN PYC 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						if(debug) System.out.println("\t Regla 34");
						RESULT = new NodoEscribir(ea);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_puts",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sent_return ::= RETURN exp PYC 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						if(debug) System.out.println("\t Regla 33b");
						RESULT = new NodoReturn(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_return",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sent_return ::= RETURN PYC 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 33");
						RESULT = new NodoReturn();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_return",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sent_args ::= exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 32b");
						RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_args",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sent_args ::= exp COMA sent_args 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sent_argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sent_argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent_args = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 32 argumentos");

						NodoBase hijoActual = ex;
						
						if (hijoActual != null) {
						
							while(hijoActual.TieneHermano()){
							
								hijoActual = hijoActual.getHermanoDerecha();
							
							}
							
							hijoActual.setHermanoDerecha(sent_args);
							RESULT = ex;
						
						} else {
						
							RESULT = sent_args;
						
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_args",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sent_call ::= ID LPAREN sent_args RPAREN PYC 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sent_argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sent_argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase sent_args = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						if(debug) System.out.println("\t Regla 31");
						RESULT = new NodoCallFunc(nombre, sent_args);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_call",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sent_if ::= IF LPAREN exp RPAREN cuerpo 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 30b");
						RESULT = new NodoIf(ex, cu);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sent_if ::= IF LPAREN exp RPAREN cuerpo ELSE cuerpo 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cu2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cu2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 30");
						RESULT = new NodoIf(ex, cu, cu2);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sent_iter ::= sent_dw 
            {
              NodoBase RESULT =null;
		int dwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dw = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 29c");
						RESULT = dw;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_iter",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sent_iter ::= sent_while 
            {
              NodoBase RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sw = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 29b");
						RESULT = sw;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_iter",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sent_iter ::= sent_for 
            {
              NodoBase RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 29");
						RESULT = sf;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_iter",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sent_io ::= sent_gets 
            {
              NodoBase RESULT =null;
		int sgeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sgeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sge = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 28b");
						RESULT = sge;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_io",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sent_io ::= sent_puts 
            {
              NodoBase RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 28");
						RESULT = sp;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_io",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= sent_call 
            {
              NodoBase RESULT =null;
		int stcallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stcallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase stcall = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 25e");
						RESULT = stcall;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= FALSE 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 25d");
						RESULT = new NodoValor(0, 1);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= TRUE 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 25d");
						RESULT = new NodoValor(1, 1);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 25c");

										 
						System.out.println("Devolvi nodo numero entero");
					
						if (valor != null) {
							RESULT = new NodoValor(Integer.valueOf(valor));
						} else { 
							RESULT = null;
							System.out.println("\t ERROR en cup revisar el valor del numero");
						}

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 25b");

						if(variable != null) {
							System.out.println("\t contruyendo nodoId para lexema:" + variable.toString());
							RESULT = new NodoIdentificador(variable.toString());
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 25");
						RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= factor 
            {
              NodoBase RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 23b");
						RESULT = fa;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= term DIV factor 
            {
              NodoBase RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase te = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 23b");
						RESULT = new NodoOperacion(te, tipoOp.entre, fa);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= term MULT factor 
            {
              NodoBase RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase te = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int muright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 23");
						RESULT = new NodoOperacion(te, tipoOp.por, fa);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp_a ::= term 
            {
              NodoBase RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase te = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 21b");
						RESULT = te;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp_a ::= exp_a MENOS term 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase te = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 21");
						RESULT = new NodoOperacion(ea, tipoOp.menos, te);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp_a ::= exp_a MAS term 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase te = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 21");
						RESULT = new NodoOperacion(ea, tipoOp.mas, te);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_exp ::= exp_a 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 20g");
						RESULT = ea;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_exp ::= simple_exp DIF exp_a 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ea2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 20f");
						RESULT = new NodoOperacion(ea, tipoOp.diferente, ea2);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_exp ::= simple_exp IGUAL exp_a 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ea2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 20e");
						RESULT = new NodoOperacion(ea, tipoOp.igual, ea2);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_exp ::= simple_exp MAYIG exp_a 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ea2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 20d");
						RESULT = new NodoOperacion(ea, tipoOp.mayor_igual, ea2);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_exp ::= simple_exp MAYOR exp_a 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ea2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 20c");
						RESULT = new NodoOperacion(ea, tipoOp.mayor, ea2);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_exp ::= simple_exp MENOR exp_a 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ea2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 20b");
						RESULT = new NodoOperacion(ea, tipoOp.menor, ea2);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple_exp ::= simple_exp MENIG exp_a 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ea2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 20");
						RESULT = new NodoOperacion(ea, tipoOp.menor_igual, ea2);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp_l ::= simple_exp 
            {
              NodoBase RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 19b");
						RESULT = se;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_l",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_l ::= exp_l AND simple_exp 
            {
              NodoBase RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase el = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 19");
						RESULT = new NodoOperacion(el, tipoOp.and, se);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_l",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp_l 
            {
              NodoBase RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase el = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 18c");
						RESULT = el;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp OR exp_l 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase el = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 18b");
						RESULT = new NodoOperacion(ex, tipoOp.or, el);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia_exp ::= PYC 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 17b");
						RESULT = null;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia_exp ::= exp PYC 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 17");
						RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sent_asig ::= 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 16c");
						RESULT = null;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_asig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sent_asig ::= ASIG AMP ID 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 16c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_asig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sent_asig ::= ASIG exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 16b");
						RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_asig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sent_asig ::= ASIG sent_asig 
            {
              NodoBase RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase de = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 16");
						RESULT = de;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_asig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decl ::= POINT ID sent_asig 
            {
              NodoBase RESULT =null;
		int sentaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase senta = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(debug) System.out.println("\t Regla 15b");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // decl ::= ID sent_asig 
            {
              NodoBase RESULT =null;
		int sentaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase senta = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 15");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_decl ::= decl 
            {
              NodoBase RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase de = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 14b");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_decl ::= lista_decl COMA decl 
            {
              NodoBase RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ld = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase de = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 14");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sent_decl ::= lista_decl PYC 
            {
              NodoBase RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ld = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 13b");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sent_decl ::= id_tipo lista_decl PYC 
            {
              NodoBase RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ld = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 13");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= sent_return 
            {
              NodoBase RESULT =null;
		int srtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srt = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 12e");
						RESULT = srt;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= sent_call 
            {
              NodoBase RESULT =null;
		int scaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sca = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 12e");
						RESULT = sca;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= sent_if 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 12d");
						RESULT = sif;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= sent_iter 
            {
              NodoBase RESULT =null;
		int siterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase siter = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 12c");
						RESULT = siter;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= sent_io 
            {
              NodoBase RESULT =null;
		int sioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sioright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sio = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 12b");
						RESULT = sio;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= sent_decl 
            {
              NodoBase RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sd = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 12");
						RESULT = sd;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_sentencias ::= sentencia 
            {
              NodoBase RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 11b");
						RESULT = se;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_sentencias ::= sentencia lista_sentencias 
            {
              NodoBase RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ls = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 11");

						NodoBase hijoActual = se;
					
						if (hijoActual != null) {
							while(hijoActual.TieneHermano()) {
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(ls);
							RESULT = se;
						} else {
							RESULT = ls;
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= LLI lista_sentencias LLD 
            {
              NodoBase RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ls = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 10");
						RESULT = ls;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_f ::= VOID 
            {
              String RESULT =null;
		 
						if(debug) System.out.println("\t Regla 9b");	
						RESULT = "Void";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_f",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_f ::= BOOL 
            {
              String RESULT =null;
		 
						if(debug) System.out.println("\t Regla 9a");
						RESULT = "Boolean";	
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_f",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_f ::= INT 
            {
              String RESULT =null;
		 
						if(debug) System.out.println("\t Regla 9");	
						RESULT = "Integer";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_f",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // id_tipo ::= BOOL 
            {
              String RESULT =null;
		 
						if(debug) System.out.println("\t Regla 8b");
						RESULT = "Boolean";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // id_tipo ::= INT 
            {
              String RESULT =null;
		 
						if(debug) System.out.println("\t Regla 8");
						RESULT = "Integer";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametro ::= id_tipo ID 
            {
              NodoBase RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 7");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_parametros ::= parametro 
            {
              NodoBase RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase pa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 6b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_parametros ::= parametro COMA lista_parametros 
            {
              NodoBase RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase pa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase lp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 6");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros ::= 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 5b");
						RESULT = null;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros ::= lista_parametros 
            {
              NodoBase RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase lp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 5");
						RESULT = lp;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // mainf ::= INT MAIN LPAREN RPAREN cuerpo 
            {
              NodoBase RESULT =null;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 4b");
						RESULT = new NodoMain(cu);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainf",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mainf ::= VOID MAIN LPAREN RPAREN cuerpo 
            {
              NodoBase RESULT =null;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 4");
						RESULT = new NodoMain(cu);

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainf",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcion ::= tipo_f ID LPAREN parametros RPAREN cuerpo 
            {
              NodoBase RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase pa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	  		    		if(debug) System.out.println("\t Regla 3");
						RESULT = new NodoFuncion(tipo, nombre, pa, cu);
			    	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_funciones ::= funcion 
            {
              NodoBase RESULT =null;
		int fucleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fucright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fuc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 2b");
						RESULT = fuc;
			    	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_funciones ::= lista_funciones funcion 
            {
              NodoBase RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase lf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 2");
						NodoBase hijoActual = lf;
					
						if (hijoActual != null) {
							while(hijoActual.TieneHermano()) {
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(fu);
							RESULT = lf;
						} else {
							RESULT = fu;
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= mainf 
            {
              Object RESULT =null;
		int mfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase mf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 1b");	
						ast = new NodoPrograma(mf);	
						System.out.println(ast);	
				    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= lista_funciones mainf 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase lf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase mf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 1");	
						ast = new NodoPrograma(lf, mf);	
						System.out.println(ast);	
				    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

