
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 04 13:30:29 PYST 2016
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 04 13:30:29 PYST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\010" +
    "\000\002\005\006\000\002\005\006\000\002\006\003\000" +
    "\002\006\002\000\002\006\007\000\002\007\005\000\002" +
    "\007\003\000\002\010\004\000\002\011\003\000\002\011" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\005\000\002\014\004\000\002\014\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\005\000\002\016\004\000\002\017\005\000\002\017\003" +
    "\000\002\020\004\000\002\020\005\000\002\021\004\000" +
    "\002\021\004\000\002\021\005\000\002\021\002\000\002" +
    "\022\004\000\002\022\003\000\002\023\005\000\002\023" +
    "\003\000\002\031\005\000\002\031\003\000\002\047\005" +
    "\000\002\047\003\000\002\024\005\000\002\024\003\000" +
    "\002\025\003\000\002\025\003\000\002\026\005\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\005\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\036\011\000\002\036\007\000" +
    "\002\037\007\000\002\040\005\000\002\040\003\000\002" +
    "\041\004\000\002\041\005\000\002\042\007\000\002\043" +
    "\007\000\002\044\011\000\002\045\007\000\002\046\011" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\010\005\011\007\010\010\012\001\002\000" +
    "\010\005\011\007\010\010\012\001\002\000\004\002\234" +
    "\001\002\000\004\040\035\001\002\000\010\005\ufffd\007" +
    "\ufffd\010\ufffd\001\002\000\004\046\ufff0\001\002\000\006" +
    "\004\230\046\uffef\001\002\000\006\004\225\046\ufff1\001" +
    "\002\000\004\046\014\001\002\000\004\036\015\001\002" +
    "\000\010\007\022\010\023\037\ufff8\001\002\000\004\046" +
    "\224\001\002\000\004\037\033\001\002\000\006\037\ufff9" +
    "\043\030\001\002\000\006\037\ufff5\043\ufff5\001\002\000" +
    "\006\011\ufff2\046\ufff2\001\002\000\006\004\024\046\ufff3" +
    "\001\002\000\004\004\025\001\002\000\004\036\026\001" +
    "\002\000\004\037\027\001\002\000\004\037\ufff7\001\002" +
    "\000\006\007\022\010\032\001\002\000\006\037\ufff6\043" +
    "\ufff6\001\002\000\006\011\ufff3\046\ufff3\001\002\000\004" +
    "\040\035\001\002\000\010\005\ufffc\007\ufffc\010\ufffc\001" +
    "\002\000\030\006\043\007\022\010\032\011\044\012\061" +
    "\013\054\014\064\015\051\016\040\034\046\046\047\001" +
    "\002\000\032\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\034\uffeb\041\uffeb\046" +
    "\uffeb\001\002\000\006\042\uffe2\043\uffe2\001\002\000\004" +
    "\036\220\001\002\000\032\006\043\007\022\010\032\011" +
    "\044\012\061\013\054\014\064\015\051\016\040\034\046" +
    "\041\216\046\047\001\002\000\032\006\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\034\uffbd\041\uffbd\046\uffbd\001\002\000\016\036\107\042" +
    "\214\045\072\046\103\047\102\050\076\001\002\000\004" +
    "\046\211\001\002\000\032\006\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\034\uffbb" +
    "\041\uffbb\046\uffbb\001\002\000\004\036\203\001\002\000" +
    "\012\023\153\036\137\042\uffdc\043\uffdc\001\002\000\032" +
    "\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\034\uffbe\041\uffbe\046\uffbe\001\002" +
    "\000\004\040\035\001\002\000\032\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\034\uffea\041\uffea\046\uffea\001\002\000\032\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\034\uffec\041\uffec\046\uffec\001\002\000\004\036" +
    "\171\001\002\000\032\006\uffba\007\uffba\010\uffba\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\034\uffba\041" +
    "\uffba\046\uffba\001\002\000\006\011\044\046\070\001\002" +
    "\000\032\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\034\uffe8\041\uffe8\046\uffe8" +
    "\001\002\000\006\042\165\043\164\001\002\000\004\036" +
    "\160\001\002\000\032\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\034\uffe9\041" +
    "\uffe9\046\uffe9\001\002\000\032\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\034" +
    "\uffe6\041\uffe6\046\uffe6\001\002\000\004\036\067\001\002" +
    "\000\032\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\034\uffe7\041\uffe7\046\uffe7" +
    "\001\002\000\032\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\034\uffbc\041\uffbc" +
    "\046\uffbc\001\002\000\012\007\022\010\032\011\044\046" +
    "\070\001\002\000\012\023\153\037\uffdc\042\uffdc\043\uffdc" +
    "\001\002\000\016\036\107\042\100\045\072\046\103\047" +
    "\102\050\076\001\002\000\040\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\037\uffc9\042\uffc9\043\uffc9\001\002" +
    "\000\006\011\044\046\070\001\002\000\040\017\uffd2\020" +
    "\uffd2\021\116\022\117\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\037\uffd2\042\uffd2\043" +
    "\uffd2\001\002\000\006\033\123\042\146\001\002\000\040" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\037\uffc0" +
    "\042\uffc0\043\uffc0\001\002\000\040\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\037\uffc8\042\uffc8\043\uffc8\001" +
    "\002\000\006\011\uffda\046\uffda\001\002\000\014\032\125" +
    "\033\uffd8\037\uffd8\042\uffd8\043\uffd8\001\002\000\040\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\037\uffbf\042" +
    "\uffbf\043\uffbf\001\002\000\042\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\036\137\037\uffca\042\uffca\043\uffca" +
    "\001\002\000\040\017\uffce\020\uffce\021\uffce\022\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\037\uffce\042\uffce\043\uffce\001\002\000\040\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\037\uffc7\042" +
    "\uffc7\043\uffc7\001\002\000\030\024\134\025\132\026\135" +
    "\027\133\030\131\031\127\032\uffd6\033\uffd6\037\uffd6\042" +
    "\uffd6\043\uffd6\001\002\000\014\036\107\045\072\046\103" +
    "\047\102\050\076\001\002\000\034\017\112\020\113\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\037\uffd4\042\uffd4\043\uffd4\001\002\000\014\036" +
    "\107\045\072\046\103\047\102\050\076\001\002\000\014" +
    "\036\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\001\002\000" +
    "\014\036\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\001\002" +
    "\000\040\017\uffd3\020\uffd3\021\116\022\117\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\037\uffd3\042\uffd3\043\uffd3\001\002\000\014\036\107\045" +
    "\072\046\103\047\102\050\076\001\002\000\014\036\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\001\002\000\014\036" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\001\002\000\040" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\037\uffcf" +
    "\042\uffcf\043\uffcf\001\002\000\006\033\123\037\122\001" +
    "\002\000\040\017\uffcb\020\uffcb\021\uffcb\022\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\037\uffcb\042\uffcb\043\uffcb\001\002\000\014\036\107" +
    "\045\072\046\103\047\102\050\076\001\002\000\014\032" +
    "\125\033\uffd9\037\uffd9\042\uffd9\043\uffd9\001\002\000\014" +
    "\036\107\045\072\046\103\047\102\050\076\001\002\000" +
    "\030\024\134\025\132\026\135\027\133\030\131\031\127" +
    "\032\uffd7\033\uffd7\037\uffd7\042\uffd7\043\uffd7\001\002\000" +
    "\014\036\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\001\002" +
    "\000\014\036\107\045\072\046\103\047\102\050\076\001" +
    "\002\000\014\036\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\001\002\000\014\036\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\001\002\000\014\036\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\001\002\000\014\036\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\001\002\000\014\036\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\001\002\000\034\017\112\020\113\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\037\uffd5\042\uffd5\043\uffd5\001\002\000\014\036" +
    "\107\045\072\046\103\047\102\050\076\001\002\000\010" +
    "\033\123\037\uffb5\043\uffb5\001\002\000\006\037\143\043" +
    "\142\001\002\000\014\036\107\045\072\046\103\047\102" +
    "\050\076\001\002\000\004\042\144\001\002\000\070\006" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\037\uffb7\041\uffb7\042\uffb7\043\uffb7\046" +
    "\uffb7\001\002\000\010\033\123\037\uffb6\043\uffb6\001\002" +
    "\000\006\011\uffdb\046\uffdb\001\002\000\004\037\150\001" +
    "\002\000\004\040\035\001\002\000\032\006\uffb0\007\uffb0" +
    "\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\034\uffb0\041\uffb0\046\uffb0\001\002\000\010\037\uffe1" +
    "\042\uffe1\043\uffe1\001\002\000\026\023\153\036\107\037" +
    "\uffdc\042\uffdc\043\uffdc\044\156\045\072\046\103\047\102" +
    "\050\076\001\002\000\012\033\123\037\uffde\042\uffde\043" +
    "\uffde\001\002\000\010\037\uffdf\042\uffdf\043\uffdf\001\002" +
    "\000\004\046\157\001\002\000\010\037\uffdd\042\uffdd\043" +
    "\uffdd\001\002\000\014\036\107\045\072\046\103\047\102" +
    "\050\076\001\002\000\010\017\112\020\113\037\162\001" +
    "\002\000\004\042\163\001\002\000\032\006\uffb2\007\uffb2" +
    "\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\034\uffb2\041\uffb2\046\uffb2\001\002\000\006\011\044" +
    "\046\070\001\002\000\044\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\034\uffe4" +
    "\036\uffe4\041\uffe4\042\uffe4\045\uffe4\046\uffe4\047\uffe4\050" +
    "\uffe4\001\002\000\006\042\uffe3\043\uffe3\001\002\000\006" +
    "\042\170\043\164\001\002\000\044\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\034\uffe5\036\uffe5\041\uffe5\042\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\001\002\000\004\046\172\001\002\000\004" +
    "\037\173\001\002\000\004\042\174\001\002\000\032\006" +
    "\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\016\uffb1\034\uffb1\041\uffb1\046\uffb1\001\002\000" +
    "\004\016\176\001\002\000\004\036\177\001\002\000\014" +
    "\036\107\045\072\046\103\047\102\050\076\001\002\000" +
    "\006\032\125\037\201\001\002\000\004\042\202\001\002" +
    "\000\032\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013" +
    "\uffae\014\uffae\015\uffae\016\uffae\034\uffae\041\uffae\046\uffae" +
    "\001\002\000\014\036\107\045\072\046\103\047\102\050" +
    "\076\001\002\000\006\033\123\037\205\001\002\000\004" +
    "\040\035\001\002\000\034\006\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\034\uffb8" +
    "\035\207\041\uffb8\046\uffb8\001\002\000\004\040\035\001" +
    "\002\000\032\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\034\uffb9\041\uffb9\046" +
    "\uffb9\001\002\000\012\023\153\037\uffdc\042\uffdc\043\uffdc" +
    "\001\002\000\010\037\uffe0\042\uffe0\043\uffe0\001\002\000" +
    "\006\033\123\042\215\001\002\000\032\006\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\034\uffb4\041\uffb4\046\uffb4\001\002\000\032\006\uffb3" +
    "\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\034\uffb3\041\uffb3\046\uffb3\001\002\000\040" +
    "\002\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\034\uffee\035\uffee" +
    "\041\uffee\046\uffee\001\002\000\032\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\034\uffed\041\uffed\046\uffed\001\002\000\014\036\107\045" +
    "\072\046\103\047\102\050\076\001\002\000\006\032\125" +
    "\037\222\001\002\000\004\040\035\001\002\000\032\006" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\034\uffaf\041\uffaf\046\uffaf\001\002\000" +
    "\006\037\ufff4\043\ufff4\001\002\000\004\036\226\001\002" +
    "\000\004\037\227\001\002\000\004\040\ufffa\001\002\000" +
    "\004\036\231\001\002\000\004\037\232\001\002\000\004" +
    "\040\ufffb\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\000\001\002\000\004\040\035\001\002\000\010\005\ufffe" +
    "\007\ufffe\010\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\014\002\004\003\003\004\006\005\005\012" +
    "\012\001\001\000\010\004\235\005\234\012\012\001\001" +
    "\000\002\001\001\000\004\013\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\016\007" +
    "\017\010\020\011\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\030\011" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\033\001\001\000\002\001\001\000\042\011\055\014" +
    "\040\015\052\016\035\017\057\020\036\034\051\035\061" +
    "\036\056\037\064\041\062\042\047\043\041\044\065\045" +
    "\044\046\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\011\055\015\216\016\035\017" +
    "\057\020\036\034\051\035\061\036\056\037\064\041\062" +
    "\042\047\043\041\044\065\045\044\046\054\001\001\000" +
    "\002\001\001\000\022\023\212\024\107\026\073\030\103" +
    "\031\100\033\076\037\104\047\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\151" +
    "\001\001\000\002\001\001\000\004\013\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\166\020\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\055\016\070\017\057\020\036" +
    "\001\001\000\004\021\151\001\001\000\024\022\072\023" +
    "\074\024\107\026\073\030\103\031\100\033\076\037\104" +
    "\047\105\001\001\000\002\001\001\000\004\020\146\001" +
    "\001\000\004\027\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\127\001\001\000\022\023" +
    "\120\024\107\026\073\030\103\031\100\033\076\037\104" +
    "\047\105\001\001\000\004\025\110\001\001\000\012\026" +
    "\113\030\103\033\076\037\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\114\001\001\000\010\030" +
    "\117\033\076\037\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\024\107\026\073\030\103\031\123\033\076" +
    "\037\104\047\105\001\001\000\002\001\001\000\016\024" +
    "\107\026\073\030\103\033\076\037\104\047\125\001\001" +
    "\000\004\032\127\001\001\000\002\001\001\000\014\024" +
    "\135\026\073\030\103\033\076\037\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\110\001\001\000\024" +
    "\023\137\024\107\026\073\030\103\031\100\033\076\037" +
    "\104\040\140\047\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\023\144\024\107\026\073\030\103\031" +
    "\100\033\076\037\104\047\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\021\154\023\153\024\107\026" +
    "\073\030\103\031\100\033\076\037\104\047\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\024\160\026\073\030\103\033\076" +
    "\037\104\001\001\000\004\025\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\024\107\026\073\030\103\031\177\033\076\037\104" +
    "\047\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\023\203\024\107\026\073\030\103" +
    "\031\100\033\076\037\104\047\105\001\001\000\002\001" +
    "\001\000\004\013\205\001\001\000\002\001\001\000\004" +
    "\013\207\001\001\000\002\001\001\000\004\021\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\024\107\026\073\030\103\031\220\033\076\037\104" +
    "\047\105\001\001\000\002\001\001\000\004\013\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\236\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/

	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		/*if (args.length==0) 
			parser_obj=new parser(new Scanner(System.in,sf),sf);
		else*/
			parser_obj=new parser(new Scanner(new java.io.FileInputStream("prueba.mc"),sf),sf);

		parser_obj.parse();
		/*
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
		ast.Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Tiny.Generador.setTablaSimbolos(ts);
		Tiny.Generador.generarCodigoObjeto(root);
		*/
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sent_dw ::= DO cuerpo WHILE LPAREN exp_l RPAREN PYC 
            {
              NodoBase RESULT =null;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase el = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
						if(debug) System.out.println("\t Regla 37");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_dw",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sent_while ::= WHILE LPAREN exp_l RPAREN cuerpo 
            {
              NodoBase RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase el = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 36");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_while",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sent_for ::= FOR LPAREN sent_decl sentencia_exp decl RPAREN cuerpo 
            {
              NodoBase RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase sd = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase decl = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 35");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_for",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sent_gets ::= GETS LPAREN ID RPAREN PYC 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 34");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_gets",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sent_puts ::= PUTS LPAREN exp_a RPAREN PYC 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						if(debug) System.out.println("\t Regla 33");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_puts",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sent_return ::= RETURN exp PYC 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						if(debug) System.out.println("\t Regla 32b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_return",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sent_return ::= RETURN PYC 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 32");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_return",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sent_args ::= exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 31b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_args",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sent_args ::= sent_args COMA exp 
            {
              NodoBase RESULT =null;
		int sent_argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sent_argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase sent_args = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 31");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_args",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sent_call ::= ID LPAREN sent_args RPAREN PYC 
            {
              NodoBase RESULT =null;
		int sent_argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sent_argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase sent_args = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						if(debug) System.out.println("\t Regla 30");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_call",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sent_if ::= IF LPAREN exp RPAREN cuerpo 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 29b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sent_if ::= IF LPAREN exp RPAREN cuerpo ELSE cuerpo 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cu2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cu2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 29");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sent_iter ::= sent_dw 
            {
              NodoBase RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sd = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 28c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_iter",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sent_iter ::= sent_while 
            {
              NodoBase RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sw = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 28b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_iter",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sent_iter ::= sent_for 
            {
              NodoBase RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 28");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_iter",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sent_io ::= sent_gets 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 27b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_io",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sent_io ::= sent_puts 
            {
              NodoBase RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 27");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_io",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor_bool ::= FALSE 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 26b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_bool",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor_bool ::= TRUE 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 26");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_bool",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relop ::= DIF 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 25f");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relop ::= IGUAL 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 25e");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relop ::= MAYIG 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 25d");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relop ::= MAYOR 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 25c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relop ::= MENOR 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 25b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relop ::= MENIG 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 25");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= sent_call 
            {
              NodoBase RESULT =null;
		int stcallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stcallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase stcall = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 24e");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= factor_bool 
            {
              NodoBase RESULT =null;
		int factor_boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factor_boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase factor_bool = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 24d");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 24c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= ID 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 24b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 24");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mulop ::= DIV 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 23b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // mulop ::= MULT 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 23");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= factor 
            {
              NodoBase RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 22b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= term mulop factor 
            {
              NodoBase RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase te = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int muright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase mu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 22");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // adop ::= MENOS 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 21b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // adop ::= MAS 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 21");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp_a ::= term 
            {
              NodoBase RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase te = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 20b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp_a ::= exp_a adop term 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ad = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase te = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 20");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_exp ::= exp_a 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 19b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_exp ::= simple_exp relop exp_a 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase rl = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ea2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 19");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp_l ::= simple_exp 
            {
              NodoBase RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 18b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_l",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp_l ::= exp_l AND simple_exp 
            {
              NodoBase RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase el = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 18");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_l",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp_l 
            {
              NodoBase RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase el = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 17c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp OR exp_l 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase el = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 17b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia_exp ::= PYC 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 16b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia_exp ::= exp PYC 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 16");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sent_asig ::= 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 15c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_asig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sent_asig ::= ASIG AMP ID 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 15c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_asig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sent_asig ::= ASIG exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 15b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_asig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sent_asig ::= ASIG sent_asig 
            {
              NodoBase RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase de = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 15");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_asig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // decl ::= POINT ID sent_asig 
            {
              NodoBase RESULT =null;
		int sentaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase senta = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(debug) System.out.println("\t Regla 15c");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decl ::= ID sent_asig 
            {
              NodoBase RESULT =null;
		int sentaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase senta = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 15c");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_decl ::= decl 
            {
              NodoBase RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase de = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 14b");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_decl ::= lista_decl COMA decl 
            {
              NodoBase RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ld = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase de = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 14");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sent_decl ::= lista_decl PYC 
            {
              NodoBase RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ld = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 13b");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sent_decl ::= id_tipo lista_decl PYC 
            {
              NodoBase RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase it = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ld = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 13");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= sent_return 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 12e");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= sent_call 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 12e");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= sent_if 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 12d");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= sent_iter 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 12c");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= sent_io 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 12b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= sent_decl 
            {
              NodoBase RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sd = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) System.out.println("\t Regla 12");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_sentencias ::= sentencia 
            {
              NodoBase RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 11b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_sentencias ::= lista_sentencias sentencia 
            {
              NodoBase RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ls = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 11");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo ::= LLI lista_sentencias LLD 
            {
              NodoBase RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ls = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 10");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_f ::= VOID 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 9b");	

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_f",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_f ::= BOOL 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 9a");	

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_f",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_f ::= INT 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 9");	

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_f",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // id_tipo ::= BOOL 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 8b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // id_tipo ::= INT 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 8");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametro ::= id_tipo ID 
            {
              NodoBase RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase it = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t Regla 7");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_parametros ::= parametro 
            {
              NodoBase RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase pa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 6b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_parametros ::= lista_parametros COMA parametro 
            {
              NodoBase RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase lp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase pa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 6");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros ::= INT MAIN MAIN LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 5b");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros ::= 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 5");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros ::= lista_parametros 
            {
              NodoBase RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase lp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // mainf ::= INT MAIN LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		
						if(debug) System.out.println("\t Regla 4b");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainf",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mainf ::= VOID MAIN LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		 
						if(debug) System.out.println("\t Regla 4");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainf",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcion ::= tipo_f ID LPAREN parametros RPAREN cuerpo 
            {
              NodoBase RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase tf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 
	  		    		if(debug) System.out.println("\t Regla 3");

			    	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_funciones ::= funcion 
            {
              NodoBase RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 2b");

			    	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_funciones ::= lista_funciones funcion 
            {
              NodoBase RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase lf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 2");

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= mainf cuerpo 
            {
              Object RESULT =null;
		int mfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase mf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 1b");

				    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= lista_funciones mainf cuerpo 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase lf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase mf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) System.out.println("\t Regla 1");

			    	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

