package compilador;

import java_cup.runtime.*;
import ast.*;
//import otros.*;

parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/

	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		/*if (args.length==0) 
			parser_obj=new parser(new Scanner(System.in,sf),sf);
		else*/
		parser_obj=new parser(new Scanner(new java.io.FileInputStream("pruebas/sintactico/ejemplo.mc"),sf),sf);

		parser_obj.parse();
		
		
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
		ast.Util.imprimirAST(root);
		/*TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Tiny.Generador.setTablaSimbolos(ts);
		Tiny.Generador.generarCodigoObjeto(root);
		*/
	}

:}

action code {:
	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	String tipo;
	String var_identificador;
	boolean puntero = false;
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	
:}

/* Simbolos Terminales */

terminal MAIN;
terminal VOID;
terminal RETURN;
terminal BOOL;
terminal INT;
terminal PUTS;
terminal GETS;
terminal FOR;
terminal DO;
terminal WHILE;
terminal MAS;
terminal MENOS;
terminal MULT;
terminal DIV;
terminal ASIG;
terminal MENOR;
terminal MENIG;
terminal MAYOR;
terminal MAYIG;
terminal IGUAL;
terminal DIF;
terminal AND;
terminal OR;
terminal IF;
terminal ELSE;
terminal LPAREN;
terminal RPAREN;
terminal LLI;
terminal LLD;
terminal PYC;
terminal COMA;
terminal AMP;
terminal String NUM;
terminal String ID;
terminal boolean FALSE;
terminal boolean TRUE;

/* Simbolos No Terminales */

non terminal programa;
non terminal NodoBase lista_funciones;
non terminal NodoBase funcion;
non terminal NodoBase mainf;
non terminal NodoBase parametros;
non terminal NodoBase lista_parametros;
non terminal NodoBase parametro;
non terminal String id_tipo;
non terminal String tipo_f;
non terminal NodoBase cuerpo;
non terminal NodoBase lista_sentencias;
non terminal NodoBase sentencia;
non terminal NodoBase sent_decl;
non terminal NodoBase lista_decl;
non terminal NodoBase decl;
non terminal NodoBase sentencia_exp;
non terminal NodoBase exp;
non terminal NodoBase exp_a;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase exp_l;
non terminal NodoBase sent_io;
non terminal NodoBase sent_iter;
non terminal NodoBase sent_if;
non terminal NodoBase sent_call;
non terminal NodoBase sent_args;
non terminal NodoBase sent_return;
non terminal NodoBase sent_puts;
non terminal NodoBase sent_gets;
non terminal NodoBase sent_for;
non terminal NodoBase sent_while;
non terminal NodoBase sent_dw;
non terminal NodoBase simple_exp;

/* Precedencia de operadores */

precedence left MAS;
precedence left MENOS;
precedence left MULT;

/* REGLAS GRAMATICALES */

/* REGLA 1*/
programa 	::= lista_funciones:lf mainf:mf 
			    	{: 
						if(debug) System.out.println("\t Regla 1");	
						ast = new NodoPrograma(lf, mf);	
						System.out.println(ast);	
				    :}
				| mainf:mf
			    	{: 
						if(debug) System.out.println("\t Regla 1b");	
						ast = new NodoPrograma(mf);		
				    :}
				;

/* REGLA 2*/
lista_funciones ::= lista_funciones:lf funcion:fu 
					{: 
						if(debug) System.out.println("\t Regla 2");
						NodoBase hijoActual = fu;
					
						if (hijoActual != null) {
							while(hijoActual.TieneHermano()) {
								hijoActual = hijoActual.getHermanoDerecha();
							}
							// Si existen hermanos ahora
							// Hijo actual = LF, debido a que la recursividad es por la izquierda
							hijoActual = fu;
							hijoActual.setHermanoDerecha(lf);
							RESULT = fu;
						} else {
							RESULT = fu;
						}
					:}
				| funcion:fuc
					{: 
						if(debug) System.out.println("\t Regla 2b");
						RESULT = fuc;
			    	:}
				;

/* REGLA 3*/
funcion ::=  tipo_f:tipo ID:nombre LPAREN parametros:pa RPAREN cuerpo:cu 
	  		    	{: 
	  		    		if(debug) System.out.println("\t Regla 3");
						RESULT = new NodoFuncion(tipo, nombre, pa, cu);
			    	:}
			    ;

/* REGLA 4*/				
mainf ::= VOID MAIN LPAREN /*vac�o */RPAREN cuerpo:cu
					{: 
						if(debug) System.out.println("\t Regla 4");
						RESULT = new NodoMain(cu);

					:}
				| INT MAIN LPAREN /* vacio */ RPAREN cuerpo:cu
					{:
						if(debug) System.out.println("\t Regla 4b");
						RESULT = new NodoMain(cu);
					:}
				;

/* REGLA  5 */						
parametros ::= lista_parametros:lp
					{: 
						if(debug) System.out.println("\t Regla 5");
						RESULT = lp;
					:}
				| /* vacio */
					{: 
						if(debug) System.out.println("\t Regla 5b");
						RESULT = null;
					:}
				;

/* REGLA 6 */
lista_parametros ::= parametro:pa COMA lista_parametros:lp
					{: 
						if(debug) System.out.println("\t Regla 6");
						NodoBase hijoActual = pa;
					
						if (hijoActual != null) {
							while(hijoActual.TieneHermano()) {
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(lp);
							RESULT = pa;
						} else {
							RESULT = pa;
						}

					:}
				| parametro:pa
					{: 
						if(debug) System.out.println("\t Regla 6b");
						RESULT = pa;
					:}
				;

/* REGLA 7 */			
parametro ::= id_tipo:it ID:variable
					{: 
						if(debug) System.out.println("\t Regla 7");
						RESULT = new NodoVar(it, variable);
					:}
				;	
 
/* REGLA 8 */
id_tipo ::= INT 
					{: 
						if(debug) System.out.println("\t Regla 8");
						tipo = "Integer";
						RESULT = "Integer";
					:}	
				| BOOL
					{: 
						if(debug) System.out.println("\t Regla 8b");
						tipo = "Boolean";
						RESULT = "Boolean";
					:}
				;

/* REGLA 9 */		
tipo_f ::= INT  
					{: 
						if(debug) System.out.println("\t Regla 9");	
						RESULT = "Integer";
					:}
				| BOOL
					{: 
						if(debug) System.out.println("\t Regla 9a");
						RESULT = "Boolean";	
					:}
				| VOID
					{: 
						if(debug) System.out.println("\t Regla 9b");	
						RESULT = "Void";
					:}
				;	

/* REGLA 10 */					
cuerpo ::= LLI lista_sentencias:ls LLD				
					{: 
						if(debug) System.out.println("\t Regla 10");
						RESULT = new NodoCuerpo(ls);
					:}
				;	

/* REGLA 11 */				
lista_sentencias ::= sentencia:se lista_sentencias:ls 
					{: 
						if(debug) System.out.println("\t Regla 11");

						NodoBase hijoActual = se;
					
						if (hijoActual != null) {
							while(hijoActual.TieneHermano()) {
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(ls);
							RESULT = se;
						} else {
							RESULT = ls;
						}
					:}
				| sentencia:se
					{: 
						if(debug) System.out.println("\t Regla 11b");
						RESULT = se;
					:}
				;

/* REGLA 12 */
sentencia ::= sent_decl:sd
					{:
						if(debug) System.out.println("\t Regla 12");
						RESULT = sd;
					:}
				| sent_io: sio
					{:
						if(debug) System.out.println("\t Regla 12b");
						RESULT = sio;
					:}
				| sent_iter:siter
					{:
						if(debug) System.out.println("\t Regla 12c");
						RESULT = siter;
					:}
				| sent_if:sif
					{:
						if(debug) System.out.println("\t Regla 12d");
						RESULT = sif;
					:}
				| sent_call:sca PYC
					{:
						if(debug) System.out.println("\t Regla 12e");
						RESULT = sca;
					:}
				| sent_return:srt
					{:
						if(debug) System.out.println("\t Regla 12e");
						RESULT = srt;
					:}
				;

/* REGLA 13 */
sent_decl ::= id_tipo:it lista_decl:ld PYC 			
					{: 
						if(debug) System.out.println("\t Regla 13");
						tipo = it;
						RESULT = ld;
					:}
				| lista_decl:ld PYC	
					{: 
						if(debug) System.out.println("\t Regla 13b");
						RESULT = ld;
					:}
				;	

/* REGLA 14 */
lista_decl ::=  decl:de  COMA lista_decl:ld 			
					{: 
						if(debug) System.out.println("\t Regla 14");
						NodoBase hijoActual = de;
					
						if (hijoActual != null) {
							while(hijoActual.TieneHermano()) {
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(ld);
							RESULT = de;
						} else {
							RESULT = de;
						}	
					:}
				| decl:de	
					{: 
						if(debug) System.out.println("\t Regla 14b");
						RESULT = de;
					:}
				;	

/* REGLA 15 */
decl ::=  ID:ident  ASIG exp:ex
				{: 
					if(debug) System.out.println("\t Regla 15");
					RESULT = new NodoAsignacion(ident, ex);
				:}
			| MULT ID:ident ASIG exp:ex
				{:
					if(debug) System.out.println("\t Regla 15d");
					RESULT = new NodoAsignacion(ident, ex, true);

				:}
			| ID:ident /* Vacio */
				{:	
					if(debug) System.out.println("\t Regla 15e");
					RESULT = new NodoVar(tipo, ident.toString());
				:}
			| MULT ID:ident 
				{:
					if(debug) System.out.println("\t Regla 15e");
					RESULT = new NodoVar(tipo, ident.toString(), true);
				:}
			;

/* REGLA 17 */
sentencia_exp ::= exp:ex PYC
					{: 
						if(debug) System.out.println("\t Regla 17");
						RESULT = ex;
					:}
				| PYC
					{:
						if(debug) System.out.println("\t Regla 17b");
						RESULT = null;
					:}
				;

/* REGLA 18 */
exp ::=  exp:ex OR exp_l:el
					{:
						if(debug) System.out.println("\t Regla 18b");
						RESULT = new NodoOperacion(ex, tipoOp.or, el);
					:}
				| exp_l:el
					{:
						if(debug) System.out.println("\t Regla 18c");
						RESULT = el;
					:}
				;

/* REGLA 19 */
exp_l ::= exp_l:el AND simple_exp:se
					{: 
						if(debug) System.out.println("\t Regla 19");
						RESULT = new NodoOperacion(el, tipoOp.and, se);
					:}
				| simple_exp:se
					{:
						if(debug) System.out.println("\t Regla 19b");
						RESULT = se;
					:}
				;

/* REGLA 20 */
simple_exp ::= simple_exp:ea MENIG exp_a:ea2
					{: 
						if(debug) System.out.println("\t Regla 20");
						RESULT = new NodoOperacion(ea, tipoOp.menor_igual, ea2);
					:}
				| simple_exp:ea MENOR exp_a:ea2
					{:
						if(debug) System.out.println("\t Regla 20b");
						RESULT = new NodoOperacion(ea, tipoOp.menor, ea2);
					:}
				| simple_exp:ea MAYOR exp_a:ea2 
					{:
						if(debug) System.out.println("\t Regla 20c");
						RESULT = new NodoOperacion(ea, tipoOp.mayor, ea2);
					:}
				| simple_exp:ea MAYIG exp_a:ea2  
					{:
						if(debug) System.out.println("\t Regla 20d");
						RESULT = new NodoOperacion(ea, tipoOp.mayor_igual, ea2);
					:}
				| simple_exp:ea IGUAL exp_a:ea2   
					{:
						if(debug) System.out.println("\t Regla 20e");
						RESULT = new NodoOperacion(ea, tipoOp.igual, ea2);
					:}
				| simple_exp:ea DIF exp_a:ea2 
					{:
						if(debug) System.out.println("\t Regla 20f");
						RESULT = new NodoOperacion(ea, tipoOp.diferente, ea2);
					:}
				| exp_a:ea
					{:
						if(debug) System.out.println("\t Regla 20g");
						RESULT = ea;
					:}
				;

/* REGLA 21 */
exp_a ::= exp_a:ea MAS term:te
					{: 
						if(debug) System.out.println("\t Regla 21");
						RESULT = new NodoOperacion(ea, tipoOp.mas, te);
					:}
		  		| exp_a:ea MENOS term:te 
					{:
						if(debug) System.out.println("\t Regla 21");
						RESULT = new NodoOperacion(ea, tipoOp.menos, te);
					:}
				| term:te
					{:
						if(debug) System.out.println("\t Regla 21b");
						RESULT = te;
					:}
				;

/* REGLA 23 */
term ::= term:te MULT:mu factor:fa
					{: 
						if(debug) System.out.println("\t Regla 23");
						RESULT = new NodoOperacion(te, tipoOp.por, fa);
					:}
				| term:te DIV factor:fa
					{:
						if(debug) System.out.println("\t Regla 23b");
						RESULT = new NodoOperacion(te, tipoOp.entre, fa);
					:}
				
				| factor:fa
					{:
						if(debug) System.out.println("\t Regla 23b");
						RESULT = fa;
					:}
				;


/* REGLA 25 */
factor ::= 		LPAREN exp:ex RPAREN
					{: 
						if(debug) System.out.println("\t Regla 25");
						RESULT = ex;
					:}
				| ID:variable
					{:
						if(debug) System.out.println("\t Regla 25b");

						if(variable != null) {
							System.out.println("\t contruyendo nodoId para lexema:" + variable.toString());
							RESULT = new NodoIdentificador(variable.toString());
						}
					:}
				| MULT ID:variable 
					{:
						if(debug) System.out.println("\t Regla 25c");
						RESULT = new NodoIdentificador(variable, null, true);
					:}
				| AMP ID:variable 
					{:
						if(debug) System.out.println("\t Regla 25d");
						NodoIdentificador nodoID = new NodoIdentificador(variable, null, false);
						nodoID.setReference(true);
						RESULT = nodoID;

					:}
				| NUM: valor
					{:
						if(debug) System.out.println("\t Regla 25e");

										 
						System.out.println("Devolvi nodo numero entero");
					
						
						RESULT = new NodoValor(Integer.valueOf(valor));

					:}
				| TRUE
					{:
						if(debug) System.out.println("\t Regla 25e");
						RESULT = new NodoValor(1, 1);
					:}

				| FALSE
					{:
						if(debug) System.out.println("\t Regla 25f");
						RESULT = new NodoValor(0, 1);
					:}
				| sent_call:stcall 
					{:
						if(debug) System.out.println("\t Regla 25g");
						RESULT = stcall;
					:}
				;


/* REGLA 28 */
sent_io ::= sent_puts:sp
					{: 
						if(debug) System.out.println("\t Regla 28");
						RESULT = sp;
					:}
				| sent_gets: sge
					{:
						if(debug) System.out.println("\t Regla 28b");
						RESULT = sge;
					:}
				;

/* REGLA 29 */
sent_iter ::= sent_for:sf
					{: 
						if(debug) System.out.println("\t Regla 29");
						RESULT = sf;
					:}
				| sent_while:sw
					{:
						if(debug) System.out.println("\t Regla 29b");
						RESULT = sw;
					:}
				| sent_dw:dw
					{:
						if(debug) System.out.println("\t Regla 29c");
						RESULT = dw;
					:}
				;

/* REGLA 30 */
sent_if ::= IF LPAREN exp:ex RPAREN cuerpo:cu ELSE cuerpo:cu2
					{: 
						if(debug) System.out.println("\t Regla 30");
						RESULT = new NodoIf(ex, cu, cu2);
					:}
				| IF LPAREN exp:ex RPAREN cuerpo:cu
					{:
						if(debug) System.out.println("\t Regla 30b");
						RESULT = new NodoIf(ex, cu);
					:}
				;

/* REGLA 31 */
sent_call ::= ID:nombre LPAREN sent_args:sent_args RPAREN
					{:
						if(debug) System.out.println("\t Regla 31");
						RESULT = new NodoCallFunc(nombre, sent_args);
					:}
				|  ID:nombre LPAREN /* Vacio */ RPAREN
					{:
						if(debug) System.out.println("\t Regla 31");
						RESULT = new NodoCallFunc(nombre, null);
					:}
			 	;

/* REGLA 32 */
sent_args ::=  exp:ex COMA sent_args:sent_args
					{:
						if(debug) System.out.println("\t Regla 32 argumentos");

						NodoBase hijoActual = ex;
						
						if (hijoActual != null) {
						
							while(hijoActual.TieneHermano()){
							
								hijoActual = hijoActual.getHermanoDerecha();
							
							}
							
							hijoActual.setHermanoDerecha(sent_args);
							RESULT = ex;
						
						} else {
						
							RESULT = sent_args;
						
						}
					:}
				| exp:ex
					{:
						if(debug) System.out.println("\t Regla 32b");
						RESULT = ex;
					:}
				;

/* REGLA 33 */
sent_return ::= RETURN PYC
					{: 
						if(debug) System.out.println("\t Regla 33");
						RESULT = new NodoReturn();
					:}
				| RETURN exp:ex PYC
					{:
						if(debug) System.out.println("\t Regla 33b");
						RESULT = new NodoReturn(ex);
					:}
				;

/* REGLA 34 */
sent_puts ::=  PUTS LPAREN exp_a:ea RPAREN PYC
					{:
						if(debug) System.out.println("\t Regla 34");
						RESULT = new NodoEscribir(ea);
					:}
				;


/* REGLA 35 */
sent_gets ::= GETS LPAREN ID:variable RPAREN PYC
					{: 
						if(debug) System.out.println("\t Regla 35");
						RESULT = new NodoLeer(variable);
					:}
				;

/* REGLA 36 */
sent_for ::= FOR LPAREN sent_decl:sd sentencia_exp:se decl:decl RPAREN cuerpo:cu
					{: 
						if(debug) System.out.println("\t Regla 36");
						RESULT = new NodoFor(sd, se, decl, cu); // TODO COMPLETAR NODO
					:}
				;

/* REGLA 37 */
sent_while ::= WHILE LPAREN exp_l:prueba RPAREN cuerpo:cuerpo
					{: 
						if(debug) System.out.println("\t Regla 37");
						RESULT = new NodoWhile(prueba, cuerpo);
					:}
				;

/* REGLA 38 */
sent_dw ::= DO cuerpo:cuerpo WHILE LPAREN exp_l:prueba RPAREN PYC
					{: 
						if(debug) System.out.println("\t Regla 38");
						RESULT = new NodoDoWhile(cuerpo, prueba);
					:}
				;








